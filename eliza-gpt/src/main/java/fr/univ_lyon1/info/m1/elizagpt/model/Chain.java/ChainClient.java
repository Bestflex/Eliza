package fr.univ_lyon1.info.m1.elizagpt.model;



/**
 * The ChainClient class.
 * It uses a chain of handlers to analyze and respond to user queries or statements.
 */
public class ChainClient {
    private Handler chain;
    private MessageProcessor messageProcessor;

    /**
     * Constructs a new ChainClient .
     *
     * @param messageProcessor The MessageProcessor.
     */
    public ChainClient(final MessageProcessor messageProcessor) {
        this.messageProcessor = messageProcessor;
        this.chain = new NameHandler(
                        new NameQuestionHandler(
                            new QuiEstLePlusHandler(
                                new JeHandler(
                                    new QuestionHandler(
                                        new RandomResponseHandler(null))))));
    }

    /**
     * Processes user input through the chain of responsibility and returns the generated response.
     *
     * @param text The user input text to be processed.
     * @return The response generated by the chain of handlers.
     */
    public String processUserInput(final String text) {
        return chain.process(messageProcessor.normalize(text), messageProcessor);
    }
}


/*

        String normalizedText = normalize(text);
    
        Pattern pattern;
        Matcher matcher;
    
        // First, try to answer specifically to what the user said
        pattern = Pattern.compile(".*Je m'appelle (.*)\\.", Pattern.CASE_INSENSITIVE);
        matcher = pattern.matcher(normalizedText);
        if (matcher.matches()) {
            return "Bonjour " + matcher.group(1) + ".";
        }

        pattern = Pattern.compile("Quel est mon nom \\?", Pattern.CASE_INSENSITIVE);
        matcher = pattern.matcher(normalizedText);
        if (matcher.matches()) {
             if (getName() != null) {
                 return "Votre nom est " + getName() + ".";
             } else {
                return "Je ne connais pas votre nom.";
             }
        }
        pattern = Pattern.compile("Qui est le plus (.*) \\?", Pattern.CASE_INSENSITIVE);
        matcher = pattern.matcher(normalizedText);
        if (matcher.matches()) {
            return "Le plus " + matcher.group(1) + " est bien sûr votre enseignant de MIF01 !";
        }
        pattern = Pattern.compile("((Je .*)|(J'.*))\\.", Pattern.CASE_INSENSITIVE);
        matcher = pattern.matcher(normalizedText);
        if (matcher.matches()) {
            final String startQuestion = pickRandom(new String[] {
                "Pourquoi dites-vous que ",
                "Pourquoi pensez-vous que ",
                "Êtes-vous sûr que ",
            });
            return startQuestion + firstToSecondPerson(matcher.group(1)) + " ?";
        }
        pattern = Pattern.compile("(.*)\\?", Pattern.CASE_INSENSITIVE);
        matcher = pattern.matcher(normalizedText);
        if (matcher.matches()) {
            final String reponse = pickRandom(new String[] {//TODO VOIR SI CA DEVRAIT ETRE LA
                    "Ici, c'est moi qui pose les questions. ",
                    "Je vous renvoie la question. ",
            });
            return reponse;
        }

        // Nothing clever to say, answer randomly
        if (random.nextBoolean()) {
            return "Il faut beau aujourd'hui, vous ne trouvez pas ?";
        }
        if (random.nextBoolean()) {
            return "Je ne comprends pas.";
        }
        if (random.nextBoolean()) {
            return "Hmmm, hmm ...";
        }
        // Default answer
        if (getName() != null) {
            return "Qu'est-ce qui vous fait dire cela, " + getName() + " ?";
        } else {
            return "Qu'est-ce qui vous fait dire cela ?";
        }

        */

